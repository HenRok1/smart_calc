#include "parse.h"
#include "stack.h"

#test test_1
char src[100] = "4^acos(x/4)/tan(2*x)";
double x_text = 1.2;
double result = read_str(src, x_text);
double real_result = -6.31492;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-1 failed");

#test test_2
char src[100] = "x+x";
double x_text = 2;
double result = read_str(src, x_text);
double real_result = 4;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-2 failed");

#test test_3
char src[100] = "123 + 0.456";
double result = read_str(src, 0);
double real_result = 123.456;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-3 failed");

#test test_4
char src[100] = "-(-1)";
double result = read_str(src, 0);
double real_result = 1;
ck_assert_msg(result == real_result, "test-4 failed");

#test test_5
char src[100] = "cos(10mod2.2)";
double result = read_str(src, 0);
double real_result = 0.362358;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-5 failed");

#test test_6
char src[100] = "sqrt(ln(10))";
double result = read_str(src, 0);
double real_result = 1.517427;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-6 failed");

#test test_7
char src[100] = "atan(10)+sin(10)";
double result = read_str(src, 0);
double real_result = 1.644775;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-7 failed");

#test test_8
char src[100] = "asin(1)";
double result = read_str(src, 0);
double real_result = 1.570796;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-8 failed");

#test test_9
char src[100] = "log(x)";
double x_text = 1;
double result = read_str(src, x_text);
double real_result = 0;
ck_assert_msg(real_result == result, "test-9 failed");

#test test_10
char src[100] = "10-20*(-10)";
double result = read_str(src, 0);
double real_result = -210;
ck_assert_msg(fabs(result) - fabs(real_result) <= 0.00001, "test-10 failed");

#test test_11
char src[100] = "-(o(i(a(10.01)*n(2))/10m2))^q(5)";
int result = check_for_er(src);
ck_assert_msg(result, "test-11 failed");

#test test_12
char src[100] = ")(s(x)";
int result = check_for_er(src);
ck_assert_msg(!result, "test-12 failed");

#test test_13
char src[100] = ".+m)";
int result = check_for_er(src);
ck_assert_msg(!result, "test-13 failed");

#test test_14
char src[100] = "//mod+";
int result = check_for_er(src);
ck_assert_msg(!result, "test-14 failed");
